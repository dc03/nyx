CONST          ::= "const"
REF            ::= "ref"
ALPHA          ::= "A-Za-z"
NUM            ::= "0-9"
UNDER          ::= "_"
ESCAPE         ::= "\n"|"\r"|"\t"|"\b"|"\\"|"\'"|"\""
EOL            ::= ";"|"\n"
IDENTIFIER     ::= (ALPHA|UNDER)(NUM|ALPHA|UNDER)*

BUILTIN        ::= CONST? REF? ("int"|"float"|"string"|"bool")
TYPE           ::= BUILTIN
                 | CONST? REF? IDENTIFIER
                 | CONST? REF? "[" TYPE ("," expression)? "]"
                 | CONST? REF? "{" TYPE ("," TYPE)* ","? "}"
                 | "typeof" logic_or

STRING         ::= "\'" (NUM|ALPHA|UNDER|ESCAPE)*  "\'"
                 | "\"" (NUM|ALPHA|UNDER|ESCAPE)*  "\""
                 | STRING+
NUMBER         ::= NUM+ "."? NUM+ ("e" NUM+)? ;
LITERAL        ::= "false"|"true"|"null"|STRING|NUMBER

expression     ::= comma
comma          ::= assignment     ("," assignment)*
assignment     ::= (call ".")? IDENTIFIER ("="|"+="|"-="|"*="|"/=") assignment
                 | ternary
ternary        ::= logic_or       ("?" logic_or ":" ternary)*
logic_or       ::= logic_and      (("or"|"||") logic_and)*
logic_and      ::= bit_or         (("and"|"&&") bit_or)*
bit_or         ::= bit_xor        ("|" bit_xor)*
bit_xor        ::= bit_and        ("^" bit_and)*
bit_and        ::= equality       ("&" equality)*
equality       ::= comparison     (("!="|"==") comparison)*
comparison     ::= range          ((">"|">="|"<"|"<=") range)*
range          ::= bitshift       ((".."|"..=") bitshift)*
bitshift       ::= addition       (("<<"|">>") addition)*
addition       ::= multiplication (("-"|"+"|"%") multiplication)*
multiplication ::= unary          (("/"|"*") unary)*
unary          ::= ("!"|"-"|"~"|"++"|"--") unary
                 | call

arguments      ::= assignment     ("," assignment)*
call           ::= list           (("(" arguments? ")")|("." IDENTIFIER))*
list           ::= "[" assignment ("," assignment)* ","? "]"
                 | tuple
tuple          ::= "{" assignment ("," assignment)* ","? "}"
                 | get

get            ::= expression "." IDENTIFIER
                 | primary
index          ::= expression "[" expression "]" ("=" assignment)?
super          ::= "super" "." IDENTIFIER

primary        ::= LITERAL|IDENTIFIER|index
                 | super|"this"
                 | "(" expression ")"
                 | expression "::" IDENTIFIER
                 | "move" IDENTIFIER

declaration    ::= statement
                 | import
                 | var
                 | var_tuple
                 | fn
                 | type_decl
                 | class

import         ::= "import" STRING EOL
var            ::= ("var"|"const"|"ref") IDENTIFIER (":" TYPE)? ("=" expression)? EOL

ident_tuple    ::= "{" IDENTIFIER|ident_tuple ("," (IDENTIFIER|ident_tuple))* ","? "}"
var_tuple      ::= ("var"|"const"|"ref") ident_tuple (":" TYPE)? ("=" expression)? EOL

params         ::= (IDENTIFIER|ident_tuple ":" TYPE)*
fn             ::= "fn" "~"? IDENTIFIER "(" params ")" "->" TYPE block

type_decl      ::= "type" IDENTIFIER "=" TYPE EOL
class          ::= "class" IDENTIFIER "{" (("private"|"public"|"protected")(var|fn))* "}"

statement      ::= expr_stmt
                 | for
                 | if
                 | while
                 | switch
                 | break
                 | continue
                 | return
                 | block

expr_stmt      ::= expression EOL
for            ::= "for" "(" (var|expr_stmt|";") expression? ";" expression? ")" block
if             ::= "if" expression block ("else" if|block)?
while          ::= "while" expression block
switch         ::= "switch" expression "{" (expression "->" statement)* ("default" "->" statement)? "}"
break          ::= "break" EOL
continue       ::= "continue" EOL
return         ::= "return" expression? EOL
block          ::= "{" (var|statement)* "}"

program        ::= declaration* EOF